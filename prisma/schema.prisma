datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
  output        = "../prisma/client"
}
model UserExternal {
  id       Int        @id @default(autoincrement())
  name     String
  email    String     @unique
  tel      String
  password String
  createAt DateTime   @default(now())
  updateAt DateTime   @updatedAt
  BookRoom BookRoom[]
}

model CoWork {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  location         String
  tel              String
  picture          String
  BranchToRoom     BranchToRoom[]
  OpenClose        OpenClose?
  FacilityToCoWork FacilityToCoWork[]
  userInternal     UserInternal?      @relation(fields: [userInternalId], references: [id])
  userInternalId   Int?               @unique //make one to one
  bookRoom         BookRoom[]
  Room             Room[]
}

model UserInternal {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  tel      String
  password String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  coWork   CoWork?
}

model Room {
  id           Int            @id @default(autoincrement())
  name         String
  capacity     Int
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  coWork       CoWork         @relation(fields: [coWorkId], references: [id])
  coWorkId     Int
  BranchToRoom BranchToRoom[]
  RoomRate     RoomRate[]
}

model RoomRate {
  id                 Int              @id @default(autoincrement())
  price              Int?
  createAt           DateTime         @default(now())
  updateAt           DateTime         @updatedAt
  BookRoom           BookRoom[]
  duration           durationCategory @relation(fields: [durationCategoryId], references: [id])
  durationCategoryId Int
  room               Room?            @relation(fields: [roomId], references: [id])
  roomId             Int?
}

model durationCategory {
  id          Int        @id @default(autoincrement())
  duration    Int        @default(1)
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  RoomRate    RoomRate[]
  openclose   OpenClose? @relation(fields: [openCloseId], references: [id])
  openCloseId Int?
}

model Facility {
  id               Int                @id @default(autoincrement())
  name             String
  createAt         DateTime           @default(now())
  updateAt         DateTime           @updatedAt
  //FacilityToRoom FacilityToRoom[]
  FacilityToCoWork FacilityToCoWork[]
}

model FacilityToCoWork {
  id         Int      @id @default(autoincrement())
  coWork     CoWork   @relation(fields: [coWorkId], references: [id])
  coWorkId   Int
  facility   Facility @relation(fields: [facilityId], references: [id])
  facilityId Int
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
}

// model FacilityToRoom {
//   id         Int      @id @default(autoincrement())
//   room       Room     @relation(fields: [roomId], references: [id])
//   roomId     Int
//   facilities Facility @relation(fields: [facilityId], references: [id])
//   facilityId Int
//   createAt   DateTime @default(now())
//   updateAt   DateTime @updatedAt
// }

model BranchToRoom {
  id       Int      @id @default(autoincrement())
  coWork   CoWork   @relation(fields: [coWorkId], references: [id])
  coWorkId Int
  room     Room     @relation(fields: [roomId], references: [id])
  roomId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model BookRoom {
  id                   Int                @id @default(autoincrement())
  cowork               CoWork             @relation(fields: [coWorkId], references: [id])
  coWorkId             Int
  startTime            DateTime
  roomRate             RoomRate           @relation(fields: [roomRateId], references: [id])
  roomRateId           Int
  status               String
  createAt             DateTime           @default(now())
  updateAt             DateTime           @updatedAt
  UserExternal         UserExternal       @relation(fields: [userExternalId], references: [id])
  userExternalId       Int
  vertifyCode          VertifyBookingCode @relation(fields: [vertifyBookingCodeId], references: [id])
  vertifyBookingCodeId Int
  //date
}

model OpenClose {
  id                 Int                @id @default(autoincrement())
  openTimeMon        Int
  closeTimeMon       Int
  isOpenMon          Boolean
  isOpen24hoursMon   Boolean
  openTimeTue        Int
  closeTimeTue       Int
  isOpenTue          Boolean
  isOpen24hoursTue   Boolean
  openTimeWed        Int
  closeTimeWed       Int
  isOpenWed          Boolean
  isOpen24hoursWed   Boolean
  openTimeThurs      Int
  closeTimeThurs     Int
  isOpenThurs        Boolean
  isOpen24hoursThurs Boolean
  openTimeFri        Int
  closeTimeFri       Int
  isOpenFri          Boolean
  isOpen24hoursFri   Boolean
  openTimeSat        Int
  closeTimeSat       Int
  isOpenSat          Boolean
  isOpen24hoursSat   Boolean
  openTimeSun        Int
  closeTimeSun       Int
  isOpenSun          Boolean
  isOpen24hoursSun   Boolean
  coWork             CoWork             @relation(fields: [coWorkId], references: [id])
  coWorkId           Int                @unique
  createAt           DateTime           @default(now())
  updateAt           DateTime           @updatedAt
  durationCategory   durationCategory[]
}

model VertifyBookingCode {
  id         Int        @id @default(autoincrement())
  verifyCode String
  bookdate   DateTime
  createAt   DateTime   @default(now())
  updateAt   DateTime   @updatedAt
  bookRoom   BookRoom[]
}
