model UserExternal {
  id       Int        @id @default(autoincrement())
  name     String
  email    String     @unique
  tel      String
  password String?
  BookRoom BookRoom[]
  //LoginExternal LoginExternal[] //user 1 person can login in many times
  createAt DateTime   @default(now())
  updateAt DateTime   @updatedAt
}

model CoWork {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  location         String
  tel              String
  picture          String
  BranchToRoom     BranchToRoom[]
  //OpenClose        OpenClose?
  FacilityToCoWork FacilityToCoWork[]
  userInternal     UserInternal?      @relation(fields: [userInternalId], references: [id])
  userInternalId   Int?               @unique //make one to one
  bookRoom         BookRoom[]
  Close            Close?
  Open             Open?
  OpenClose24Hours OpenClose24Hours?
  OpenCloseBoolean OpenCloseBoolean?
}

model UserInternal {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  tel      String
  password String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  coWork   CoWork?
  //LoginInternal LoginInternal[]
}

model Room {
  id           Int            @id @default(autoincrement())
  name         String
  capacity     Int
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  BranchToRoom BranchToRoom[]
  RoomRate     RoomRate[]
}

model RoomRate {
  id                 Int              @id @default(autoincrement())
  price              Int?
  createAt           DateTime         @default(now())
  updateAt           DateTime         @updatedAt
  BookRoom           BookRoom[]
  duration           durationCategory @relation(fields: [durationCategoryId], references: [id])
  durationCategoryId Int
  room               Room?            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId             Int?
  active             Boolean?         @default(true)
}

model durationCategory {
  id          Int        @id @default(autoincrement())
  duration    Int        @unique
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  RoomRate    RoomRate[]
  //openclose   OpenClose? @relation(fields: [openCloseId], references: [id])
  openCloseId Int?
}

model Facility {
  id               Int                @id @default(autoincrement())
  name             String
  createAt         DateTime           @default(now())
  updateAt         DateTime           @updatedAt
  //FacilityToRoom FacilityToRoom[]
  FacilityToCoWork FacilityToCoWork[]
}

model FacilityToCoWork {
  id         Int      @id @default(autoincrement())
  coWork     CoWork   @relation(fields: [coWorkId], references: [id], onDelete: Cascade)
  coWorkId   Int
  facility   Facility @relation(fields: [facilityId], references: [id])
  facilityId Int
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
}

// model FacilityToRoom {
//   id         Int      @id @default(autoincrement())
//   room       Room     @relation(fields: [roomId], references: [id])
//   roomId     Int
//   facilities Facility @relation(fields: [facilityId], references: [id])
//   facilityId Int
//   createAt   DateTime @default(now())
//   updateAt   DateTime @updatedAt
// }

model BranchToRoom {
  id       Int        @id @default(autoincrement())
  coWork   CoWork     @relation(fields: [coWorkId], references: [id], onDelete: Cascade)
  coWorkId Int
  room     Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId   Int
  createAt DateTime   @default(now())
  updateAt DateTime   @updatedAt
  BookRoom BookRoom[]
}

model BookRoom {
  id                   Int                @id @default(autoincrement())
  cowork               CoWork             @relation(fields: [coWorkId], references: [id], onDelete: Cascade)
  coWorkId             Int
  startTime            DateTime
  roomRate             RoomRate           @relation(fields: [roomRateId], references: [id])
  roomRateId           Int
  status               String
  createAt             DateTime           @default(now())
  updateAt             DateTime           @updatedAt
  UserExternal         UserExternal       @relation(fields: [userExternalId], references: [id])
  userExternalId       Int
  vertifyCode          VertifyBookingCode @relation(fields: [vertifyBookingCodeId], references: [id])
  vertifyBookingCodeId Int
  branchToRoom         BranchToRoom?      @relation(fields: [branchToRoomId], references: [id])
  branchToRoomId       Int?
  price                Int?               @default(0)
}

model VertifyBookingCode {
  id         Int        @id @default(autoincrement())
  verifyCode String
  bookdate   DateTime
  createAt   DateTime   @default(now())
  updateAt   DateTime   @updatedAt
  bookRoom   BookRoom[]
}

model Open {
  id        Int      @id @default(autoincrement())
  monOpen   Int
  tueOpen   Int
  wedOpen   Int
  thursOpen Int
  friOpen   Int
  satOpen   Int
  sunOpen   Int
  cowork    CoWork   @relation(fields: [coWorkId], references: [id], onDelete: Cascade)
  coWorkId  Int      @unique
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Close {
  id         Int      @id @default(autoincrement())
  monClose   Int
  tueClose   Int
  wedClose   Int
  thursClose Int
  friClose   Int
  satClose   Int
  sunClose   Int
  cowork     CoWork   @relation(fields: [coWorkId], references: [id], onDelete: Cascade)
  coWorkId   Int      @unique
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
}

model OpenClose24Hours {
  id           Int      @id @default(autoincrement())
  mon24hours   Boolean
  tue24hours   Boolean
  wed24hours   Boolean
  thurs24hours Boolean
  fri24hours   Boolean
  sat24hours   Boolean
  sun24hours   Boolean
  cowork       CoWork   @relation(fields: [coWorkId], references: [id], onDelete: Cascade)
  coWorkId     Int      @unique
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
}

model OpenCloseBoolean {
  id         Int      @id @default(autoincrement())
  monOnOff   Boolean
  tueOnOff   Boolean
  wedOnOff   Boolean
  thursOnOff Boolean
  friOnOff   Boolean
  satOnOff   Boolean
  sunOnOff   Boolean
  cowork     CoWork   @relation(fields: [coWorkId], references: [id], onDelete: Cascade)
  coWorkId   Int      @unique
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
}
